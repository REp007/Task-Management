openapi: 3.0.3

info:
  version: 1.0.0
  title: Swagger TaskManager (Updated with JWT)
  description: EndPoints for my Task Manager Web application

  contact:
    email: el_amranii@outlook.com

servers:
  - url: https://task-app-047s.onrender.com
    description: The local development server for Tasks

tags:
  - name: User Auth Access Token
    description: User Authentication
  - name: tasks
    description: Everything about tasks
paths:
  /api/auth/register:
    post:
      tags:
        - User Auth Access Token
      summary: Create User
      description: Create a user for login and use other endpoints
      operationId: createUser
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: ahmed@gmail.com
                password:
                  type: string
                  example: password
                  description: Password should be strong
      responses:
        '201':
          description: User created successfully

  /api/auth/login:
    post:
      tags:
        - User Auth Access Token
      summary: Login User
      description: Login user to get access token
      operationId: loginUser
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ahmed@gmail.com
                password:
                  type: string
                  example: password
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5...");

  /api/tasks:
    get:
      tags:
        - tasks
      summary: Get all tasks
      description: Retrieve all tasks for the authenticated user
      operationId: getTasks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized request (user not authenticated)
        '404':
          description: No tasks found for the user
      security: 
        - bearerAuth: []
        
    post:
      tags:
        - tasks
      summary: Add a new task
      description: Create a new task for the authenticated user
      operationId: addTask
      requestBody:
        description: Create a new Task
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized request (user not authenticated)
        '422':
          description: Validation exception
      security: 
        - bearerAuth: []

  /api/tasks/{id}:
    put:
      tags:
        - tasks
      summary: Update a task by ID
      description: Update a task for the authenticated user
      operationId: updateTaskById
      parameters:
        - name: id
          in: path
          description: ID of the task to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing Task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task' 
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized request (user not authenticated)
        '404':
          description: Task not found
        '422':
          description: Validation exception
      security: 
        - bearerAuth: []

    delete:
      tags:
        - tasks
      summary: Delete a task
      description: Delete a task for the authenticated user
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of the task to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
        '400':
          description: Invalid task value
        '401':
          description: Unauthorized request (user not authenticated)
        '404':
          description: Task not found
      security: 
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:       
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Task:
      type: object
      properties:
        title:
          type: string
          example: Update Swagger for Dummies
        description:
          type: string
          example: A description for the updated task
        user: 
          type: string
        is_resolved:
          type: boolean
      required:
        - title
        - description
        - user
        - is_resolved
    User:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: ahmed@gmail.com
        password:
          type: string
          example: (omit for security)
          description: Password 
      required:
        - name
        - email
        - password